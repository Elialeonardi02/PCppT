V test_id = 0
V failed_tests = 0
V kdiff_showed = 0B
F TEST(=str1, =str2, ohd = 0B, habr_html = 0B)
   :test_id++
   print(‘Test ’String(:test_id)‘ ...’, end' ‘’)
   str1 = pqmarkup:to_html(str1, ohd' ohd, habr_html' habr_html)
   I str1 != str2
      str1 = String(str1)
      str2 = String(str2)
      print(‘FAILED!’)
      I !:kdiff_showed
         L(envvar) [‘ProgramFiles’, ‘ProgramFiles(x86)’, ‘ProgramW6432’]
            os:environ[‘PATH’] ‘’= os:env_path_sep‘’os:getenv(envvar, ‘’)‘\KDiff3’
         V command = ‘kdiff3’
         L(file) [(‘wrong’, str1), (‘right’, str2)]
            V full_fname = fs:path:join(fs:get_temp_dir(), file[0])
            command ‘’= ‘ "’full_fname‘"’
            File(full_fname, WRITE, encoding' ‘utf-8-sig’).write(file[1])
         os:(command)
         :kdiff_showed = 1B
      :failed_tests++
   E
      print(‘passed’)

TEST(‘*‘bold’’, ‘<b>bold</b>’)
TEST(‘_‘underlined’’, ‘<u>underlined</u>’)
TEST(‘-‘strikethrough’’, ‘<s>strikethrough</s>’)
TEST(‘~‘italics’’, ‘<i>italics</i>’)
TEST("H‘header’\n"‘H(1)‘header’’, "<h3>header</h3>\n"‘<h2>header</h2>’)
TEST(‘H(+1)‘header’’, ‘<h2>header</h2>’)
TEST(‘H(-1)‘header’’, ‘<h4>header</h4>’)
TEST(‘[http://address]’, ‘<a href="http://address">http://address</a>’)
TEST(‘link[http://address]’, ‘<a href="http://address">link</a>’)
TEST(‘link[https://address]’, ‘<a href="https://address">link</a>’)
TEST(‘‘multiword link’[http://address]’, ‘<a href="http://address">multiword link</a>’)
TEST(‘link[https://address ‘title &text[[[comment]]]’]’, ‘<a href="https://address" title="title &amp;text">link</a>’)
TEST(‘link[https://address title [.&.] text[[[comment]]]]’, ‘<a href="https://address" title="title [.&amp;.] text">link</a>’)
TEST(‘‘[[[Scoping rules/]]]Code blocks’[./code-blocks]’, ‘<a href="./code-blocks" target="_self"><!--[[[Scoping rules/]]]-->Code blocks</a>’)
TEST(‘‘Versioning with 100%/versions_threshold/\‘2’ overhead’[./versioning.pq]’, ‘<a href="./versioning.pq" target="_self">Versioning with 100%/versions_threshold<sup>2</sup> overhead</a>’)
TEST(‘‘compares files based on which ~‘lines’ have changed’[http://www.devuxer.com/2014/02/15/why-the-mercurial-zipdoc-extension-fails-for-excel-files/]’, ‘<a href="http://www.devuxer.com/2014/02/15/why-the-mercurial-zipdoc-extension-fails-for-excel-files/">compares files based on which <i>lines</i> have changed</a>’)
TEST(‘text[‘title text’]’, ‘<abbr title="title text">text</abbr>’)
TEST(‘[text][‘title text’]’, ‘[text]<abbr title="title text"></abbr>’)
TEST(‘Примечание 1: только режимы ‘r’ и ‘w’ поддерживаются на данный момент [‘мои мысли на тему режимов открытия файлов’[./File]]’, ‘Примечание 1: только режимы ‘r’ и ‘w’ поддерживаются на данный момент [<a href="./File" target="_self">мои мысли на тему режимов открытия файлов</a>]’)
TEST(‘Примечание 1: только режимы ‘r’ и ‘w’ поддерживаются на данный момент [[‘’]‘мои мысли на тему режимов открытия файлов’[./File]]’, ‘Примечание 1: только режимы ‘r’ и ‘w’ поддерживаются на данный момент [<abbr title=""></abbr><a href="./File" target="_self">мои мысли на тему режимов открытия файлов</a>]’)
TEST(‘[[‘’][[[Справка/]]]Документация по методам доступна на данный момент только ‘на английском’[./../../built-in-types].]’, ‘[<abbr title=""></abbr><!--[[[Справка/]]]-->Документация по методам доступна на данный момент только <a href="./../../built-in-types" target="_self">на английском</a>.]’)
TEST(‘[‘мои мысли на тему режимов открытия файлов’[./File]]’, ‘[<a href="./File" target="_self">мои мысли на тему режимов открытия файлов</a>]’)
TEST(‘P‘http://image-url’’, ‘<img src="http://image-url" />’)
TEST(‘P‘http://image-url’[http://address]’, ‘<a href="http://address"><img src="http://image-url" /></a>’)
TEST(‘P‘http://image-url’[‘title text[[[comment]]]’]’, ‘<img src="http://image-url" title="title text" />’)
TEST(‘P‘http://image-url’[http://address ‘title text’]’, ‘<a href="http://address" title="title text"><img src="http://image-url" /></a>’)
TEST(‘P‘http://image-url’[http://address title text]’, ‘<a href="http://address" title="title text"><img src="http://image-url" /></a>’)
TEST(‘С(000)‘black text’’, ‘<span style="color: #000000">black text</span>’)
TEST(‘С(800)‘red text’’, ‘<span style="color: #FF0000">red text</span>’)
TEST(‘С(4)‘gray text’’, ‘<span style="color: #808080">gray text</span>’)
TEST(‘С(0000)‘transparent text’’, ‘<span style="color: #00000000">transparent text</span>’)
TEST(‘С(#фФ0000)‘red text’’, ‘<span style="color: #fF0000">red text</span>’)
TEST(‘C(#fF0000)‘red text’’, ‘<span style="color: #fF0000">red text</span>’)
TEST(‘C(-800)‘text on a red background’’, ‘<span style="background-color: #FF0000">text on a red background</span>’)
TEST(‘C(888-000)‘white text on black background’’, ‘<span style="color: #FFFFFF; background-color: #000000">white text on black background</span>’)
TEST(‘link[http://address][1] ‘the same link’[1]’, ‘<a href="http://address">link</a>[1] ‘the same link’[1]’)
TEST(‘link[http://address][-1] ‘the same link’[-1]’, ‘<a href="http://address">link</a> <a href="http://address">the same link</a>’)
TEST(‘[[[comment[[[[sensitive information]]]]]]]’, ‘<!--[[[comment]]]-->’)
TEST(‘[[[com]ment]]’, ‘<!--[[[com]ment]]-->’)
TEST(‘[[[[comment]]]]’, ‘’)
TEST(‘[[[[[com]m]e]n]t]’, ‘’)
TEST("\n A", "<br />\n&emsp;A")
TEST(‘ A’, ‘&emsp;A’)
TEST(‘---’, "<hr />\n")
TEST("---\n", "<hr />\n")
TEST("a\n---\n", "a<br />\n<hr />\n")
TEST("a\n---\n\n", "a<br />\n<hr />\n<br />\n")
TEST("a\n---=\n", "a<br />\n---=<br />\n")
TEST("a\n----\n", "a<br />\n<hr />\n")
TEST(‘a0‘*‘<non-bold>’’’, ‘a*‘&lt;non-bold>’’)
TEST(‘a
‘b[[[comment]]]’{
c
‘d’{e}
}’, ‘a<br />
<spoiler title="b">
c<br />
<spoiler title="d">
e</spoiler>
</spoiler>
’, habr_html' 1B)
TEST(‘‘title’{
te
}
xt’, ‘<span class="spoiler_title" onclick="return spoiler2(this, event)">title<br /></span><div class="spoiler_text" style="display: none">
te<br />
</div>
xt’, ohd' 1B)
TEST(‘#(JavaScript)‘
    { "keys": ["‘"], "command": "insert_pq" }, //also insert balancing ’
’’, ‘<source lang="JavaScript">
    { "keys": ["‘"], "command": "insert_pq" }, //also insert balancing ’
</source>’, habr_html' 1B)
TEST(‘‘Code’{
#(Python)‘
import hashlib
’
}

Some text.’, ‘<spoiler title="Code">
<source lang="Python">
import hashlib
</source>
</spoiler>
<br />
Some text.’, habr_html' 1B)
TEST(‘[[[‘]]]test```’```test’, ‘<!--[[[‘]]]-->test<code>’</code>test’, habr_html' 1B)
TEST(‘[[[‘]]]`Don’t`’, ‘<!--[[[‘]]]--><code>Don’t</code>’, habr_html' 1B)
TEST(‘'‘<Don‘t! Don‘t! Don‘t!>’’’’''''’, "<Don‘t! Don‘t! Don‘t!>")
TEST(‘`'‘<div>&lt;</div>’'`’, ‘<code>'‘&lt;div>&amp;lt;&lt;/div>’'</code>’, habr_html' 1B)
TEST(‘''‘‘’‘’’''’, '‘‘’‘’’')
TEST(‘''''‘‘‘‘Don’t! Don’t! Don’t!’'’, "Don’t! Don’t! Don’t!")
TEST(‘модуль #(11l)‘fs’’, ‘модуль <code>fs</code>’, habr_html' 1B)
TEST(\/‘
Т‘
‘‘Python’ ‘#(Python)‘rn = {'I': 1, 'V': 5, 'X': 10, 'L': 50, ...}’’’
’’, ‘<table>
<tr><td>Python</td><td><source lang="Python">rn = {'I': 1, 'V': 5, 'X': 10, 'L': 50, ...}</source></td></tr>
</table>
’, habr_html' 1B)
TEST(\/‘
Т‘
‘‘Python’ ‘#(Python)‘rn = {'I': 1, 'V': 5, 'X': 10, 'L': 50, ...}’ — ...’’
’’, ‘<table>
<tr><td>Python</td><td><code>rn = {'I': 1, 'V': 5, 'X': 10, 'L': 50, ...}</code> — ...</td></tr>
</table>
’, habr_html' 1B)
TEST(‘<<‘выравнивание по левому краю’
>>‘выравнивание по правому краю’
><‘выравнивание по центру’
<>‘выравнивание по ширине’’, \/‘
<div align="left">выравнивание по левому краю</div>
<div align="right">выравнивание по правому краю</div>
<div align="center">выравнивание по центру</div>
<div align="justify">выравнивание по ширине</div>
’)
TEST(‘‘’<<’, ‘‘’&lt;&lt;’)
TEST(‘/\‘надстрочный\superscript’\/‘подстрочный\subscript’’, ‘<sup>надстрочный\superscript</sup><sub>подстрочный\subscript</sub>’)
TEST("> Quote\n"‘’">‘Quote2’\n", "<blockquote>Quote</blockquote>\n"‘’"<blockquote>Quote2</blockquote>\n")
TEST(‘>[http://address]:‘Quoted text.’’, "<blockquote><a href=\"http://address\"><i>http://address</i></a>:<br />\nQuoted text.</blockquote>")
TEST(">[http://another-address][-1]:‘Quoted text.’\n"‘>[-1]:‘Another quoted text.’’, "<blockquote><a href=\"http://another-address\">[1]<i>http://another-address</i></a>:<br />\nQuoted text.</blockquote>\n"‘’"<blockquote><a href=\"http://another-address\">[1]<i>http://another-address</i></a>:<br />\nAnother quoted text.</blockquote>")
TEST(‘>‘Author's name’[http://address]:‘Quoted text.’’, "<blockquote><i><a href=\"http://address\">Author's name</a></i>:<br />\nQuoted text.</blockquote>")
TEST(">‘Author's name’[http://address][-1]:‘Quoted text.’\n"‘>‘Author's name’[-1]:‘Another quoted text.’’, "<blockquote><i><a href=\"http://address\">Author's name</a></i>:<br />\nQuoted text.</blockquote>\n"‘’"<blockquote><i><a href=\"http://address\">Author's name</a></i>:<br />\nAnother quoted text.</blockquote>")
TEST(‘>‘Author's name’:‘Quoted text.’’, "<blockquote><i>Author's name</i>:<br />\nQuoted text.</blockquote>")
TEST(‘‘Quoted text.’:‘Author's name’<’, "<blockquote>Quoted text.<br />\n<div align='right'><i>Author's name</i></div></blockquote>")
TEST(‘>‘Как люди думают. Дмитрий Чернышев. 2015. 304с.’:‘[[[стр.89:]]]...’’, "<blockquote><i>Как люди думают. Дмитрий Чернышев. 2015. 304с.</i>:<br />\n<!--[[[стр.89:]]]-->...</blockquote>")
TEST(">‘>‘Автор против nullable-типов?’\nДа. Адрес, указывающий на незаконный участок памяти, сам незаконен.’", "<blockquote><blockquote>Автор против nullable-типов?</blockquote>\nДа. Адрес, указывающий на незаконный участок памяти, сам незаконен.</blockquote>")
TEST(">‘> Автор против nullable-типов?\nДа. Адрес, указывающий на незаконный участок памяти, сам незаконен.’", "<blockquote><blockquote>Автор против nullable-типов?</blockquote>\nДа. Адрес, указывающий на незаконный участок памяти, сам незаконен.</blockquote>")
TEST(">‘1. A\n’", "<blockquote><ol>\n<li>A</li>\n</ol>\n</blockquote>")
TEST("!‘1. A\n’", "<div class=\"note\"><ol>\n<li>A</li>\n</ol>\n</div>")
TEST(">[http://ruscomp.24bb.ru/viewtopic.php?id=20]:‘> То есть обычные русские слова уже не являются для вас \"общепринятым\" языком?\nОбщепринятые – это те, которые я читаю в книгах, в том числе по программированию.’", "<blockquote><a href=\"http://ruscomp.24bb.ru/viewtopic.php?id=20\"><i>http://ruscomp.24bb.ru/viewtopic.php?id=20</i></a>:<br />\n<blockquote>То есть обычные русские слова уже не являются для вас \"общепринятым\" языком?</blockquote>\nОбщепринятые – это те, которые я читаю в книгах, в том числе по программированию.</blockquote>")
TEST(‘‘понимание [[[процесса]]] разбора [[[разметки]]] человеком’[‘говоря проще: приходится [[[гораздо]]] меньше думать о том, будет это работать или не будет, а просто пишешь в соответствии с чёткими/простыми/логичными правилами, и всё’]’, ‘<abbr title="говоря проще: приходится  меньше думать о том, будет это работать или не будет, а просто пишешь в соответствии с чёткими/простыми/логичными правилами, и всё">понимание  разбора  человеком</abbr>’)
TEST(‘. unordered
. list’, ‘<ul>
<li>unordered</li>
<li>list</li>
</ul>
’)
TEST(‘1. ordered
2. list’, ‘<ol>
<li>ordered</li>
<li>list</li>
</ol>
’)
TEST(‘13. disordered
2. list’, ‘<ol start="13">
<li>disordered</li>
<li value="2">list</li>
</ol>
’)
TEST(‘1. interrupted
. ol
2. list’, ‘<ol>
<li>interrupted</li>
</ol>
<ul>
<li>ol</li>
</ul>
<ol start="2">
<li>list</li>
</ol>
’)
TEST(‘. interrupted
1. ul
. list’, ‘<ul>
<li>interrupted</li>
</ul>
<ol>
<li>ul</li>
</ol>
<ul>
<li>list</li>
</ul>
’)
TEST(‘1.‘multiline
list element’
2. second’, ‘<ol>
<li>multiline<br />
list element</li>
<li>second</li>
</ol>
’)
TEST(‘.‘multiline
list element’
. second’, ‘<ul>
<li>multiline<br />
list element</li>
<li>second</li>
</ul>
’)
TEST(‘4.‘А ещё мне коды[/годы] этих символов нравятся...’

Один существенный минус ...’, ‘<ol start="4">
<li>А ещё мне коды<span class="sq"><span class="sq_brackets">[</span>/годы<span class="sq_brackets">]</span></span> этих символов нравятся...</li>
</ol>
<br />
Один существенный минус ...’, ohd' 1B)
TEST(‘4. ‘А ещё мне коды[/годы] этих символов нравятся...’{...}

Один существенный минус ...’, ‘<ol start="4">
<li><span class="spoiler_title" onclick="return spoiler2(this, event)">А ещё мне коды[/годы] этих символов нравятся...<br /></span><div class="spoiler_text" style="display: none">
...</div>
</li>
</ol>
<br />
Один существенный минус ...’, ohd' 1B)

TEST(‘>‘. a
. b’
c
d’, ‘<blockquote><ul>
<li>a</li>
<li>b</li>
</ul>
</blockquote>
c<br />
d’)

TEST(‘>[https://habr.com/ru/articles/780372/comments/#comment_26271586]:‘
Джоэл Спольски в своё время подробно расписал, почему так получается:
> Чтобы создать хороший продукт, требуется 10 лет разработки, но когда он готов - он ~‘готов’. После этого уже никто не может придумать ни единой фичи, которая была бы реально нужна.’
Поддерживаю.’, ‘<blockquote><a href="https://habr.com/ru/articles/780372/comments/#comment_26271586"><i>https://habr.com/ru/articles/780372/comments/...</i></a>:<br />
<br />
Джоэл Спольски в своё время подробно расписал, почему так получается:<br />
<blockquote>Чтобы создать хороший продукт, требуется 10 лет разработки, но когда он готов - он <i>готов</i>. После этого уже никто не может придумать ни единой фичи, которая была бы реально нужна.</blockquote></blockquote>
Поддерживаю.’)

TEST(‘T‘
H‘‘1’ ‘2’’
 ‘‘3’ ‘4’[[[comment]]]’
[[[comment]]]’
5’, ‘<table>
<tr><th>1</th><th>2</th></tr>
<tr><td>3</td><td>4</td></tr>
</table>
5’)
TEST(‘T‘‘
‘ ’ ‘ ’ ‘1’ ’‘
‘ ’ ‘ ’  |  ’‘
‘2’  -   |  ’’’, ‘<table>
<tr><td> </td><td> </td><td rowspan="3">1</td></tr>
<tr><td> </td><td> </td></tr>
<tr><td colspan="2">2</td></tr>
</table>
’)
TEST(‘T‘‘
‘ ’ ‘ ’ ‘1’ ’‘
‘ ’ ‘ ’  |  ’‘
‘2’  -   -  ’’’, ‘<table>
<tr><td> </td><td> </td><td rowspan="2">1</td></tr>
<tr><td> </td><td> </td></tr>
<tr><td colspan="3">2</td></tr>
</table>
’)
TEST(‘T‘‘
‘1’  -   -  ‘2’ ’‘
 |   -   -  ‘3’ ’‘
 |   -   -  ‘4’ ’‘
‘5’ ‘6’ ‘7’     ’’’, ‘<table>
<tr><td colspan="3" rowspan="3">1</td><td>2</td></tr>
<tr><td>3</td></tr>
<tr><td>4</td></tr>
<tr><td>5</td><td>6</td><td>7</td></tr>
</table>
’)
TEST(‘T‘
/\>>‘‘top
right’ ‘top right’ \/‘bottom right’ ‘top right’’
‘‘default alignment’ ‘default
alignment’ ‘default alignment’ ‘default alignment’’
\/><‘‘bottom center’ ‘bottom
center’ >>‘bottom
right’ ‘bottom center’’
’’, ‘<table>
<tr><td style="text-align: right; vertical-align: top">top<br />
right</td><td style="text-align: right; vertical-align: top">top right</td><td style="text-align: right; vertical-align: bottom">bottom right</td><td style="text-align: right; vertical-align: top">top right</td></tr>
<tr><td>default alignment</td><td>default<br />
alignment</td><td>default alignment</td><td>default alignment</td></tr>
<tr><td style="text-align: center; vertical-align: bottom">bottom center</td><td style="text-align: center; vertical-align: bottom">bottom<br />
center</td><td style="text-align: right; vertical-align: bottom">bottom<br />
right</td><td style="text-align: center; vertical-align: bottom">bottom center</td></tr>
</table>
’)
TEST("[[[[https://fuse.wikichip.org/news/2823/samsung-5-nm-and-4-nm-update/ <- https://en.wikipedia.org/wiki/Extreme_ultraviolet_lithography]]]]\
T‘\n\
C(-#c4f5d1)><‘‘5LPE’ - -’\n\
C(-#c4f5d1)><‘‘’ ‘7.5T (HD)’ ‘6T (UHD)’’\n\
><‘C(-#c4f5d1)‘FP’ ‘27 nm’ -’\n\
><‘C(-#c4f5d1)‘CPP’ ‘60 nm’ ‘54 nm’’\n\
’", \/‘
<table>
<tr style="background-color: #c4f5d1"><td style="text-align: center" colspan="3">5LPE</td></tr>
<tr style="background-color: #c4f5d1"><td style="text-align: center"></td><td style="text-align: center">7.5T (HD)</td><td style="text-align: center">6T (UHD)</td></tr>
<tr><td style="text-align: center; background-color: #c4f5d1">FP</td><td style="text-align: center" colspan="2">27 nm</td></tr>
<tr><td style="text-align: center; background-color: #c4f5d1">CPP</td><td style="text-align: center">60 nm</td><td style="text-align: center">54 nm</td></tr>
</table>
’)
TEST(‘A
```
let s2 = str
        .lowercaseString
        .replace("hello", withString: "goodbye")
```
B
C’, ‘A<br />
<pre>
let s2 = str
        .lowercaseString
        .replace("hello", withString: "goodbye")
</pre>
B<br />
C’)
TEST(‘#(11l)‘(‘\‘’’')
('‘‘Don’t!’)
('''‘‘‘‘Don’t! Don’t! Don’t!’)
(‘Don‘t! Don‘t! Don‘t!’’’’''')
('‘‘’‘’’')’’, ‘<style>
span.keyword {color: #0000FF; font-weight: bold;}
span.identifier {color: #00009F;}
span.string-literal {color: #800000;}
span.numeric-literal {color: #008000;}
span.constant {color: #008000;}
span.comment {color: #808080;}
</style><pre style="display: inline">(<span class="string-literal">‘\‘’<span style="opacity: 0.25">’'</span></span>)
(<span class="string-literal"><span style="opacity: 0.25">'‘</span>‘Don’t!’</span>)
(<span class="string-literal"><span style="opacity: 0.25">'''‘‘‘</span>‘Don’t! Don’t! Don’t!’</span>)
(<span class="string-literal">‘Don‘t! Don‘t! Don‘t!’<span style="opacity: 0.25">’’’'''</span></span>)
(<span class="string-literal"><span style="opacity: 0.25">'‘</span>‘’‘’<span style="opacity: 0.25">’'</span></span>)</pre>’, ohd' 1B)
TEST(‘#‘
...
’[[[comment]]]
---
’, ‘<pre class="code_block">
...
</pre><!--[[[comment]]]-->
<hr />
’)
TEST(‘#‘
BOOOsssSSSdddDDD
│└┬┘└┬┘└┬┘└┬┘└┬┘
│ │  │  │  │  └─ 0-2 биты: регистр-приёмник
│ │  │  │  └──── 3-5 биты: режим адресации регистра-приёмника
│ │  │  └─────── 6-8 биты: регистр-источник
│ │  └───────── 9-11 биты: режим адресации регистра-источника
│ └─────────── 12-14 биты: код операции
└───────────────── 15 бит: признак byte-инструкций[[[ (если 0, то инструкция выполняется над словом, а если 1 — над байтом)]]|]
’’, ‘<pre class="code_block">
BOOOsssSSSdddDDD
│└┬┘└┬┘└┬┘└┬┘└┬┘
│ │  │  │  │  └─ 0-2 биты: регистр-приёмник
│ │  │  │  └──── 3-5 биты: режим адресации регистра-приёмника
│ │  │  └─────── 6-8 биты: регистр-источник
│ │  └───────── 9-11 биты: режим адресации регистра-источника
│ └─────────── 12-14 биты: код операции
└───────────────── 15 бит: признак byte-инструкций
</pre>’)
TEST(‘#(Python)‘
array3d = [[[1, 2, 3], [4, 5, 6]]] # this should not be treated as a comment!
’’, ‘<pre class="code_block">
array3d = [[[1, 2, 3], [4, 5, 6]]] # this should not be treated as a comment!
</pre>’)
TEST(‘#(Python)‘
array3d = [[[1, 2, 3],[[[ hidden comment]]|]
            [4, 5, 6]]]
’’, ‘<pre class="code_block">
array3d = [[[1, 2, 3],
            [4, 5, 6]]]
</pre>’)

test_id++
V was_error = 0B
print(‘Test ’String(test_id)‘ (error handling) ...’, end' ‘’)
X.try
   pqmarkup:to_html("\nT‘‘‘`’’’")
X.catch pqmarkup:Exception e
   was_error = 1B
   I e.line == 2 & e.column == 5 & e.pos == 5
      print(‘passed’)
   E
      print(‘FAILED!’)
      failed_tests++
assert(was_error)

test_id++
print(‘Test ’String(test_id)‘. Checking source files for unallowed characters...’)
L(_fname) fs:walk_dir(‘.’, dir_filter' d -> d[0] != ‘.’, files_only' 0B)
   V root = fs:path:dir_name(_fname)
   [String] dirs, files
   I fs:is_dir(_fname) {dirs [+]= fs:path:base_name(_fname)} E files [+]= fs:path:base_name(_fname)
   L(name) files
      I name.ends_with((‘.py’, ‘.txt’))
         V file_bytes = File(fs:path:join(root, name)).read_bytes()
         I "\r".code C file_bytes | "\t".code C file_bytes
            print(‘Unallowed character (\r or \t) found in file '’fs:path:join(root, name)[2..]‘'’)
            failed_tests++

F check_file(fname)
   X.try
      pqmarkup:to_html(File(fname, encoding' ‘utf-8’).read(), ohd' 1B)
   X.catch pqmarkup:Exception e
      print(e.message‘ at file '’fname‘', line ’String(e.line)‘, column ’String(e.column))
      exit(1)
check_file(‘docs/en/syntax.pq.txt’)
check_file(‘docs/ru/syntax.pq.txt’)

I failed_tests == 0
   print(‘OK (all ’String(test_id)‘ tests passed)’)
   exit(0)
E
   print(String(test_id - failed_tests)‘ tests passed and ’String(failed_tests)‘ failed.’)
   exit(1)
